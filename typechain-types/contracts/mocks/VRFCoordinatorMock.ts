/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface VRFCoordinatorMockInterface extends utils.Interface {
  functions: {
    "callBackWithRandomness(bytes32,uint256,address)": FunctionFragment;
    "link()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "setConsumer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callBackWithRandomness"
      | "link"
      | "onTokenTransfer"
      | "setConsumer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callBackWithRandomness",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setConsumer", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "callBackWithRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsumer",
    data: BytesLike
  ): Result;

  events: {
    "RandomnessRequest(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomnessRequest"): EventFragment;
}

export interface RandomnessRequestEventObject {
  sender: string;
  keyHash: string;
  seed: BigNumber;
}
export type RandomnessRequestEvent = TypedEvent<
  [string, string, BigNumber],
  RandomnessRequestEventObject
>;

export type RandomnessRequestEventFilter =
  TypedEventFilter<RandomnessRequestEvent>;

export interface VRFCoordinatorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRFCoordinatorMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callBackWithRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    link(overrides?: CallOverrides): Promise<[string]>;

    onTokenTransfer(
      sender: string,
      arg1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConsumer(
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callBackWithRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    consumerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  link(overrides?: CallOverrides): Promise<string>;

  onTokenTransfer(
    sender: string,
    arg1: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConsumer(
    consumer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callBackWithRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    link(overrides?: CallOverrides): Promise<string>;

    onTokenTransfer(
      sender: string,
      arg1: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setConsumer(consumer: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RandomnessRequest(address,bytes32,uint256)"(
      sender?: string | null,
      keyHash?: BytesLike | null,
      seed?: BigNumberish | null
    ): RandomnessRequestEventFilter;
    RandomnessRequest(
      sender?: string | null,
      keyHash?: BytesLike | null,
      seed?: BigNumberish | null
    ): RandomnessRequestEventFilter;
  };

  estimateGas: {
    callBackWithRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    link(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      arg1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConsumer(
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callBackWithRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: string,
      arg1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConsumer(
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
