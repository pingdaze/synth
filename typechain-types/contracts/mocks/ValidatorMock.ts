/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ValidatorMockInterface extends utils.Interface {
  functions: {
    "addBid(uint256,address)": FunctionFragment;
    "addBid(uint256)": FunctionFragment;
    "addDeposit(uint256)": FunctionFragment;
    "addDeposit(uint256,address)": FunctionFragment;
    "auctionClaimed()": FunctionFragment;
    "claimAuction(uint256)": FunctionFragment;
    "claimAuction(uint256,address)": FunctionFragment;
    "claimExchange(uint256,address)": FunctionFragment;
    "claimRaffle(uint256,address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositMin()": FunctionFragment;
    "depositor()": FunctionFragment;
    "exchangeClaimed()": FunctionFragment;
    "getBid(uint256,address)": FunctionFragment;
    "getDeposit(uint256,address)": FunctionFragment;
    "getDeposit(uint256)": FunctionFragment;
    "getDepositMin(uint256)": FunctionFragment;
    "getDropSize(uint256)": FunctionFragment;
    "getTicketsCount(uint256,address)": FunctionFragment;
    "getTotalTicketsCount(uint256)": FunctionFragment;
    "hasClaimed(uint256,address)": FunctionFragment;
    "raffleClaimed()": FunctionFragment;
    "removeBid(uint256,address)": FunctionFragment;
    "removeDeposit(uint256,address)": FunctionFragment;
    "setDeadline(uint256,uint256)": FunctionFragment;
    "timeRemaining(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBid(uint256,address)"
      | "addBid(uint256)"
      | "addDeposit(uint256)"
      | "addDeposit(uint256,address)"
      | "auctionClaimed"
      | "claimAuction(uint256)"
      | "claimAuction(uint256,address)"
      | "claimExchange"
      | "claimRaffle"
      | "deposit"
      | "depositMin"
      | "depositor"
      | "exchangeClaimed"
      | "getBid"
      | "getDeposit(uint256,address)"
      | "getDeposit(uint256)"
      | "getDepositMin"
      | "getDropSize"
      | "getTicketsCount"
      | "getTotalTicketsCount"
      | "hasClaimed"
      | "raffleClaimed"
      | "removeBid"
      | "removeDeposit"
      | "setDeadline"
      | "timeRemaining"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBid(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBid(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDeposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDeposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAuction(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAuction(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExchange",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRaffle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositMin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDropSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsCount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTicketsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeRemaining",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBid(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBid(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAuction(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAuction(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositMin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDropSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTicketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeRemaining",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ValidatorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "addBid(uint256,address)"(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBid(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    "claimAuction(uint256)"(
      _dropID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimAuction(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimExchange(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRaffle(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositMin(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositor(overrides?: CallOverrides): Promise<[string]>;

    exchangeClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    getBid(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositMin(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDropSize(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTicketsCount(
      _dropID: BigNumberish,
      participant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalTicketsCount(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasClaimed(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    raffleClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    removeBid(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDeposit(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeadline(
      _dropID: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeRemaining(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  "addBid(uint256,address)"(
    _dropID: BigNumberish,
    bidder: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBid(uint256)"(
    _dropID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDeposit(uint256)"(
    _dropID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDeposit(uint256,address)"(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionClaimed(overrides?: CallOverrides): Promise<boolean>;

  "claimAuction(uint256)"(
    _dropID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimAuction(uint256,address)"(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimExchange(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRaffle(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(overrides?: CallOverrides): Promise<BigNumber>;

  depositMin(overrides?: CallOverrides): Promise<BigNumber>;

  depositor(overrides?: CallOverrides): Promise<string>;

  exchangeClaimed(overrides?: CallOverrides): Promise<boolean>;

  getBid(
    _dropID: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDeposit(uint256,address)"(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDeposit(uint256)"(
    _dropID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositMin(
    _dropID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDropSize(
    _dropID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTicketsCount(
    _dropID: BigNumberish,
    participant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTicketsCount(
    _dropID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasClaimed(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  raffleClaimed(overrides?: CallOverrides): Promise<boolean>;

  removeBid(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDeposit(
    _dropID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeadline(
    _dropID: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeRemaining(
    _dropID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "addBid(uint256,address)"(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBid(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionClaimed(overrides?: CallOverrides): Promise<boolean>;

    "claimAuction(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAuction(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimExchange(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRaffle(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    depositMin(overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<string>;

    exchangeClaimed(overrides?: CallOverrides): Promise<boolean>;

    getBid(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositMin(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDropSize(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketsCount(
      _dropID: BigNumberish,
      participant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTicketsCount(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    raffleClaimed(overrides?: CallOverrides): Promise<boolean>;

    removeBid(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDeposit(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeadline(
      _dropID: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeRemaining(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    "addBid(uint256,address)"(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBid(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAuction(uint256)"(
      _dropID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimAuction(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimExchange(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRaffle(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    depositMin(overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    getBid(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositMin(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDropSize(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketsCount(
      _dropID: BigNumberish,
      participant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTicketsCount(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    removeBid(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDeposit(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeadline(
      _dropID: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeRemaining(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "addBid(uint256,address)"(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBid(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimAuction(uint256)"(
      _dropID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimAuction(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimExchange(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRaffle(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositMin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBid(
      _dropID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(uint256,address)"(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(uint256)"(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositMin(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDropSize(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketsCount(
      _dropID: BigNumberish,
      participant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTicketsCount(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBid(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDeposit(
      _dropID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeadline(
      _dropID: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeRemaining(
      _dropID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
