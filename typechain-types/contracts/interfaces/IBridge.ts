/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IBridgeInterface extends utils.Interface {
  functions: {
    "activeOutbox()": FunctionFragment;
    "allowedInboxes(address)": FunctionFragment;
    "allowedOutboxes(address)": FunctionFragment;
    "deliverMessageToInbox(uint8,address,bytes32)": FunctionFragment;
    "executeCall(address,uint256,bytes)": FunctionFragment;
    "inboxAccs(uint256)": FunctionFragment;
    "messageCount()": FunctionFragment;
    "setInbox(address,bool)": FunctionFragment;
    "setOutbox(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeOutbox"
      | "allowedInboxes"
      | "allowedOutboxes"
      | "deliverMessageToInbox"
      | "executeCall"
      | "inboxAccs"
      | "messageCount"
      | "setInbox"
      | "setOutbox"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeOutbox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedInboxes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedOutboxes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deliverMessageToInbox",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboxAccs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInbox",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutbox",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeOutbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedInboxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedOutboxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverMessageToInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inboxAccs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOutbox", data: BytesLike): Result;

  events: {
    "BridgeCallTriggered(address,address,uint256,bytes)": EventFragment;
    "InboxToggle(address,bool)": EventFragment;
    "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32)": EventFragment;
    "OutboxToggle(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeCallTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InboxToggle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutboxToggle"): EventFragment;
}

export interface BridgeCallTriggeredEventObject {
  outbox: string;
  destAddr: string;
  amount: BigNumber;
  data: string;
}
export type BridgeCallTriggeredEvent = TypedEvent<
  [string, string, BigNumber, string],
  BridgeCallTriggeredEventObject
>;

export type BridgeCallTriggeredEventFilter =
  TypedEventFilter<BridgeCallTriggeredEvent>;

export interface InboxToggleEventObject {
  inbox: string;
  enabled: boolean;
}
export type InboxToggleEvent = TypedEvent<
  [string, boolean],
  InboxToggleEventObject
>;

export type InboxToggleEventFilter = TypedEventFilter<InboxToggleEvent>;

export interface MessageDeliveredEventObject {
  messageIndex: BigNumber;
  beforeInboxAcc: string;
  inbox: string;
  kind: number;
  sender: string;
  messageDataHash: string;
}
export type MessageDeliveredEvent = TypedEvent<
  [BigNumber, string, string, number, string, string],
  MessageDeliveredEventObject
>;

export type MessageDeliveredEventFilter =
  TypedEventFilter<MessageDeliveredEvent>;

export interface OutboxToggleEventObject {
  outbox: string;
  enabled: boolean;
}
export type OutboxToggleEvent = TypedEvent<
  [string, boolean],
  OutboxToggleEventObject
>;

export type OutboxToggleEventFilter = TypedEventFilter<OutboxToggleEvent>;

export interface IBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeOutbox(overrides?: CallOverrides): Promise<[string]>;

    allowedInboxes(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedOutboxes(
      outbox: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deliverMessageToInbox(
      kind: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCall(
      destAddr: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inboxAccs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    messageCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    setInbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOutbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeOutbox(overrides?: CallOverrides): Promise<string>;

  allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<boolean>;

  allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<boolean>;

  deliverMessageToInbox(
    kind: BigNumberish,
    sender: string,
    messageDataHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCall(
    destAddr: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  messageCount(overrides?: CallOverrides): Promise<BigNumber>;

  setInbox(
    inbox: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOutbox(
    inbox: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeOutbox(overrides?: CallOverrides): Promise<string>;

    allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<boolean>;

    allowedOutboxes(
      outbox: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deliverMessageToInbox(
      kind: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeCall(
      destAddr: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    setInbox(
      inbox: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOutbox(
      inbox: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeCallTriggered(address,address,uint256,bytes)"(
      outbox?: string | null,
      destAddr?: string | null,
      amount?: null,
      data?: null
    ): BridgeCallTriggeredEventFilter;
    BridgeCallTriggered(
      outbox?: string | null,
      destAddr?: string | null,
      amount?: null,
      data?: null
    ): BridgeCallTriggeredEventFilter;

    "InboxToggle(address,bool)"(
      inbox?: string | null,
      enabled?: null
    ): InboxToggleEventFilter;
    InboxToggle(inbox?: string | null, enabled?: null): InboxToggleEventFilter;

    "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32)"(
      messageIndex?: BigNumberish | null,
      beforeInboxAcc?: BytesLike | null,
      inbox?: null,
      kind?: null,
      sender?: null,
      messageDataHash?: null
    ): MessageDeliveredEventFilter;
    MessageDelivered(
      messageIndex?: BigNumberish | null,
      beforeInboxAcc?: BytesLike | null,
      inbox?: null,
      kind?: null,
      sender?: null,
      messageDataHash?: null
    ): MessageDeliveredEventFilter;

    "OutboxToggle(address,bool)"(
      outbox?: string | null,
      enabled?: null
    ): OutboxToggleEventFilter;
    OutboxToggle(
      outbox?: string | null,
      enabled?: null
    ): OutboxToggleEventFilter;
  };

  estimateGas: {
    activeOutbox(overrides?: CallOverrides): Promise<BigNumber>;

    allowedInboxes(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedOutboxes(
      outbox: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliverMessageToInbox(
      kind: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCall(
      destAddr: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inboxAccs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCount(overrides?: CallOverrides): Promise<BigNumber>;

    setInbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOutbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeOutbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedInboxes(
      inbox: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedOutboxes(
      outbox: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliverMessageToInbox(
      kind: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCall(
      destAddr: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inboxAccs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOutbox(
      inbox: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
