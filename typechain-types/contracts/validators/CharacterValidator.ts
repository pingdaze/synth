/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface CharacterValidatorInterface extends utils.Interface {
  functions: {
    "MAX_INT()": FunctionFragment;
    "augmentOptions()": FunctionFragment;
    "character()": FunctionFragment;
    "core()": FunctionFragment;
    "createCharacter(address[],string[])": FunctionFragment;
    "createCharacterL1(address[],address[],string[])": FunctionFragment;
    "nextId()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "selectableOptions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wearableOptions()": FunctionFragment;
    "wearables()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_INT"
      | "augmentOptions"
      | "character"
      | "core"
      | "createCharacter"
      | "createCharacterL1"
      | "nextId"
      | "owner"
      | "renounceOwnership"
      | "selectableOptions"
      | "transferOwnership"
      | "wearableOptions"
      | "wearables"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_INT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augmentOptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "character", values?: undefined): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCharacter",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCharacterL1",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectableOptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wearableOptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wearables", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_INT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augmentOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "character", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCharacterL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectableOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wearableOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wearables", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CharacterValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CharacterValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    augmentOptions(overrides?: CallOverrides): Promise<[string]>;

    character(overrides?: CallOverrides): Promise<[string]>;

    core(overrides?: CallOverrides): Promise<[string]>;

    createCharacter(
      pillboosts: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCharacterL1(
      pillboostsL1: string[],
      pillboostsL2: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selectableOptions(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wearableOptions(overrides?: CallOverrides): Promise<[string]>;

    wearables(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

  augmentOptions(overrides?: CallOverrides): Promise<string>;

  character(overrides?: CallOverrides): Promise<string>;

  core(overrides?: CallOverrides): Promise<string>;

  createCharacter(
    pillboosts: string[],
    traitsPlus: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCharacterL1(
    pillboostsL1: string[],
    pillboostsL2: string[],
    traitsPlus: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selectableOptions(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wearableOptions(overrides?: CallOverrides): Promise<string>;

  wearables(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    augmentOptions(overrides?: CallOverrides): Promise<string>;

    character(overrides?: CallOverrides): Promise<string>;

    core(overrides?: CallOverrides): Promise<string>;

    createCharacter(
      pillboosts: string[],
      traitsPlus: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    createCharacterL1(
      pillboostsL1: string[],
      pillboostsL2: string[],
      traitsPlus: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selectableOptions(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wearableOptions(overrides?: CallOverrides): Promise<string>;

    wearables(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    augmentOptions(overrides?: CallOverrides): Promise<BigNumber>;

    character(overrides?: CallOverrides): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    createCharacter(
      pillboosts: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCharacterL1(
      pillboostsL1: string[],
      pillboostsL2: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selectableOptions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wearableOptions(overrides?: CallOverrides): Promise<BigNumber>;

    wearables(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augmentOptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    character(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCharacter(
      pillboosts: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCharacterL1(
      pillboostsL1: string[],
      pillboostsL2: string[],
      traitsPlus: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selectableOptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wearableOptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wearables(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
