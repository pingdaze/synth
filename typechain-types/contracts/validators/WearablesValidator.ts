/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface WearablesValidatorInterface extends utils.Interface {
  functions: {
    "addOption(string,uint32)": FunctionFragment;
    "addWearable(uint32,uint8,uint8,uint8)": FunctionFragment;
    "authority()": FunctionFragment;
    "character()": FunctionFragment;
    "convertToWearableUUID(uint32,uint8,uint8,uint8)": FunctionFragment;
    "core()": FunctionFragment;
    "equipSkeleton(uint256,uint8)": FunctionFragment;
    "formToSlotCount(uint8)": FunctionFragment;
    "getWearableIDByOption(string,uint8,uint8,uint8)": FunctionFragment;
    "getWearableIDBySeries(uint32,uint8,uint8,uint8)": FunctionFragment;
    "optionStringToSeries(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeOption(string)": FunctionFragment;
    "removeWearable(uint32,uint8,uint8,uint8)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "slotCount()": FunctionFragment;
    "unequipSkeleton(uint8)": FunctionFragment;
    "wearableExists(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOption"
      | "addWearable"
      | "authority"
      | "character"
      | "convertToWearableUUID"
      | "core"
      | "equipSkeleton"
      | "formToSlotCount"
      | "getWearableIDByOption"
      | "getWearableIDBySeries"
      | "optionStringToSeries"
      | "owner"
      | "removeOption"
      | "removeWearable"
      | "setAuthority"
      | "setOwner"
      | "slotCount"
      | "unequipSkeleton"
      | "wearableExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOption",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWearable",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "character", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertToWearableUUID",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "equipSkeleton",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formToSlotCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableIDByOption",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableIDBySeries",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionStringToSeries",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWearable",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "slotCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unequipSkeleton",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wearableExists",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWearable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "character", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToWearableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "equipSkeleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formToSlotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableIDByOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableIDBySeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionStringToSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWearable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unequipSkeleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wearableExists",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  user: string;
  newAuthority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string, string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface WearablesValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WearablesValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOption(
      optionString: string,
      series: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    character(overrides?: CallOverrides): Promise<[string]>;

    convertToWearableUUID(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    core(overrides?: CallOverrides): Promise<[string]>;

    equipSkeleton(
      id: BigNumberish,
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    formToSlotCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getWearableIDByOption(
      option: string,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getWearableIDBySeries(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    optionStringToSeries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeOption(
      optionString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slotCount(overrides?: CallOverrides): Promise<[number]>;

    unequipSkeleton(
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wearableExists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addOption(
    optionString: string,
    series: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWearable(
    series: BigNumberish,
    form: BigNumberish,
    rarity: BigNumberish,
    slot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  character(overrides?: CallOverrides): Promise<string>;

  convertToWearableUUID(
    series: BigNumberish,
    form: BigNumberish,
    rarity: BigNumberish,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  core(overrides?: CallOverrides): Promise<string>;

  equipSkeleton(
    id: BigNumberish,
    slotID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  formToSlotCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getWearableIDByOption(
    option: string,
    form: BigNumberish,
    rarity: BigNumberish,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWearableIDBySeries(
    series: BigNumberish,
    form: BigNumberish,
    rarity: BigNumberish,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optionStringToSeries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeOption(
    optionString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWearable(
    series: BigNumberish,
    form: BigNumberish,
    rarity: BigNumberish,
    slot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slotCount(overrides?: CallOverrides): Promise<number>;

  unequipSkeleton(
    slotID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wearableExists(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addOption(
      optionString: string,
      series: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    character(overrides?: CallOverrides): Promise<string>;

    convertToWearableUUID(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<string>;

    equipSkeleton(
      id: BigNumberish,
      slotID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    formToSlotCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getWearableIDByOption(
      option: string,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableIDBySeries(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionStringToSeries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeOption(
      optionString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    slotCount(overrides?: CallOverrides): Promise<number>;

    unequipSkeleton(
      slotID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wearableExists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AuthorityUpdated(address,address)"(
      user?: string | null,
      newAuthority?: string | null
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(
      user?: string | null,
      newAuthority?: string | null
    ): AuthorityUpdatedEventFilter;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    addOption(
      optionString: string,
      series: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    character(overrides?: CallOverrides): Promise<BigNumber>;

    convertToWearableUUID(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    equipSkeleton(
      id: BigNumberish,
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    formToSlotCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableIDByOption(
      option: string,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableIDBySeries(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionStringToSeries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeOption(
      optionString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slotCount(overrides?: CallOverrides): Promise<BigNumber>;

    unequipSkeleton(
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wearableExists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOption(
      optionString: string,
      series: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    character(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToWearableUUID(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    equipSkeleton(
      id: BigNumberish,
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    formToSlotCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableIDByOption(
      option: string,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableIDBySeries(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionStringToSeries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOption(
      optionString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWearable(
      series: BigNumberish,
      form: BigNumberish,
      rarity: BigNumberish,
      slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slotCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unequipSkeleton(
      slotID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wearableExists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
