/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace SelectableOptions {
  export type OptionStruct = {
    req: BigNumberish;
    form: BigNumberish;
    slot: string;
    option: string;
  };

  export type OptionStructOutput = [number, number, string, string] & {
    req: number;
    form: number;
    slot: string;
    option: string;
  };
}

export interface SelectableOptionsInterface extends utils.Interface {
  functions: {
    "addOption(string,string,uint8,uint8)": FunctionFragment;
    "getCostFromOption(string)": FunctionFragment;
    "getOption(string)": FunctionFragment;
    "setEthRequirement(uint8,uint256)": FunctionFragment;
    "setNotTraitRequirement(uint8,string)": FunctionFragment;
    "setPillRequirement(uint8,address,uint256)": FunctionFragment;
    "setTraitRequirement(uint8,string)": FunctionFragment;
    "validateOption(string[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOption"
      | "getCostFromOption"
      | "getOption"
      | "setEthRequirement"
      | "setNotTraitRequirement"
      | "setPillRequirement"
      | "setTraitRequirement"
      | "validateOption"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOption",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCostFromOption",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOption", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEthRequirement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNotTraitRequirement",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPillRequirement",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraitRequirement",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOption",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCostFromOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEthRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNotTraitRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPillRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraitRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOption",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SelectableOptions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SelectableOptionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOption(
      option: string,
      slot: string,
      id: BigNumberish,
      form: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCostFromOption(
      option: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOption(
      option: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEthRequirement(
      id: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNotTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPillRequirement(
      id: BigNumberish,
      account: string,
      reqId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateOption(
      options: string[],
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOption(
    option: string,
    slot: string,
    id: BigNumberish,
    form: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCostFromOption(
    option: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOption(
    option: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEthRequirement(
    id: BigNumberish,
    cost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNotTraitRequirement(
    id: BigNumberish,
    trait: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPillRequirement(
    id: BigNumberish,
    account: string,
    reqId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraitRequirement(
    id: BigNumberish,
    trait: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateOption(
    options: string[],
    index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOption(
      option: string,
      slot: string,
      id: BigNumberish,
      form: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCostFromOption(
      option: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOption(
      option: string,
      overrides?: CallOverrides
    ): Promise<SelectableOptions.OptionStructOutput>;

    setEthRequirement(
      id: BigNumberish,
      cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNotTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPillRequirement(
      id: BigNumberish,
      account: string,
      reqId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOption(
      options: string[],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    addOption(
      option: string,
      slot: string,
      id: BigNumberish,
      form: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCostFromOption(
      option: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOption(
      option: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEthRequirement(
      id: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNotTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPillRequirement(
      id: BigNumberish,
      account: string,
      reqId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateOption(
      options: string[],
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOption(
      option: string,
      slot: string,
      id: BigNumberish,
      form: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCostFromOption(
      option: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOption(
      option: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEthRequirement(
      id: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNotTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPillRequirement(
      id: BigNumberish,
      account: string,
      reqId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraitRequirement(
      id: BigNumberish,
      trait: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateOption(
      options: string[],
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
