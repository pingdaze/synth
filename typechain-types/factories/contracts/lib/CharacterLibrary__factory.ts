/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CharacterLibrary,
  CharacterLibraryInterface,
} from "../../../contracts/lib/CharacterLibrary";

const _abi = [
  {
    inputs: [],
    name: "MAX_INT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slotID",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "head",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "torso",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lArm",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rArm",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rLeg",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lLeg",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "floating",
            type: "uint256",
          },
        ],
        internalType: "struct Outfit",
        name: "outfit",
        type: "tuple",
      },
    ],
    name: "getOutfitSlot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slotID",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "head",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mouth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "eyes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "torso",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lArm",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rArm",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rLeg",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lLeg",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "color",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marking",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mask",
            type: "uint256",
          },
        ],
        internalType: "struct Skeleton",
        name: "skeleton",
        type: "tuple",
      },
    ],
    name: "getSkeletonSlot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61063d610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063098d322814610050578063634905211461006e578063ced362111461009e575b600080fd5b6100586100ce565b60405161006591906102de565b60405180910390f35b610088600480360381019061008391906104d1565b6100f2565b60405161009591906102de565b60405180910390f35b6100b860048036038101906100b391906105c6565b610207565b6040516100c591906102de565b60405180910390f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6000808314156101085781600001519050610201565b600183141561011d5781602001519050610201565b60028314156101325781604001519050610201565b60038314156101475781606001519050610201565b600483141561015c5781608001519050610201565b6005831415610171578160a001519050610201565b6006831415610186578160c001519050610201565b600783141561019b578160e001519050610201565b60088314156101b1578161010001519050610201565b60098314156101c7578161012001519050610201565b600a8314156101dd578161014001519050610201565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60008083141561021d57816000015190506102bf565b600183141561023257816020015190506102bf565b600283141561024757816040015190506102bf565b600383141561025c57816060015190506102bf565b600483141561027157816080015190506102bf565b6005831415610286578160a0015190506102bf565b600683141561029b578160c0015190506102bf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6000819050919050565b6102d8816102c5565b82525050565b60006020820190506102f360008301846102cf565b92915050565b6000604051905090565b600080fd5b610311816102c5565b811461031c57600080fd5b50565b60008135905061032e81610308565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038282610339565b810181811067ffffffffffffffff821117156103a1576103a061034a565b5b80604052505050565b60006103b46102f9565b90506103c08282610379565b919050565b600061016082840312156103dc576103db610334565b5b6103e76101606103aa565b905060006103f78482850161031f565b600083015250602061040b8482850161031f565b602083015250604061041f8482850161031f565b60408301525060606104338482850161031f565b60608301525060806104478482850161031f565b60808301525060a061045b8482850161031f565b60a08301525060c061046f8482850161031f565b60c08301525060e06104838482850161031f565b60e0830152506101006104988482850161031f565b610100830152506101206104ae8482850161031f565b610120830152506101406104c48482850161031f565b6101408301525092915050565b60008061018083850312156104e9576104e8610303565b5b60006104f78582860161031f565b9250506020610508858286016103c5565b9150509250929050565b600060e0828403121561052857610527610334565b5b61053260e06103aa565b905060006105428482850161031f565b60008301525060206105568482850161031f565b602083015250604061056a8482850161031f565b604083015250606061057e8482850161031f565b60608301525060806105928482850161031f565b60808301525060a06105a68482850161031f565b60a08301525060c06105ba8482850161031f565b60c08301525092915050565b60008061010083850312156105de576105dd610303565b5b60006105ec8582860161031f565b92505060206105fd85828601610512565b915050925092905056fea2646970667358221220d568f0b21ec1c56896afcd832e0f230276503e9679c0e80dfae7224c7c40377f64736f6c634300080a0033";

type CharacterLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CharacterLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CharacterLibrary__factory extends ContractFactory {
  constructor(...args: CharacterLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CharacterLibrary> {
    return super.deploy(overrides || {}) as Promise<CharacterLibrary>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CharacterLibrary {
    return super.attach(address) as CharacterLibrary;
  }
  override connect(signer: Signer): CharacterLibrary__factory {
    return super.connect(signer) as CharacterLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CharacterLibraryInterface {
    return new utils.Interface(_abi) as CharacterLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CharacterLibrary {
    return new Contract(address, _abi, signerOrProvider) as CharacterLibrary;
  }
}
