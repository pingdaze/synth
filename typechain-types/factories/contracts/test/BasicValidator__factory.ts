/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BasicValidator,
  BasicValidatorInterface,
} from "../../../contracts/test/BasicValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
      {
        internalType: "contract IFabricator",
        name: "_watcher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "quantities",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "validate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "watcher",
    outputs: [
      {
        internalType: "contract IFabricator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109ca3803806109ca8339818101604052810190610032919061012c565b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061016c565b600080fd5b6000819050919050565b61009981610086565b81146100a457600080fd5b50565b6000815190506100b681610090565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e7826100bc565b9050919050565b60006100f9826100dc565b9050919050565b610109816100ee565b811461011457600080fd5b50565b60008151905061012681610100565b92915050565b6000806040838503121561014357610142610081565b5b6000610151858286016100a7565b925050602061016285828601610117565b9150509250929050565b61084f8061017b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806362749f051461003b578063d6b7486514610057575b600080fd5b61005560048036038101906100509190610542565b610075565b005b61005f61020b565b60405161006c9190610673565b60405180910390f35b6000600167ffffffffffffffff811115610092576100916102ef565b5b6040519080825280602002602001820160405280156100c05781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156100e0576100df6102ef565b5b60405190808252806020026020018201604052801561010e5781602001602082028036833780820191505090505b509050600054826000815181106101285761012761068e565b5b602002602001018181525050856000815181106101485761014761068e565b5b6020026020010151816000815181106101645761016361068e565b5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663934eddf88984846040518463ffffffff1660e01b81526004016101cf939291906107c1565b600060405180830381600087803b1580156101e957600080fd5b505af11580156101fd573d6000803e3d6000fd5b505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061027082610245565b9050919050565b61028081610265565b811461028b57600080fd5b50565b60008135905061029d81610277565b92915050565b6000819050919050565b6102b6816102a3565b81146102c157600080fd5b50565b6000813590506102d3816102ad565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610327826102de565b810181811067ffffffffffffffff82111715610346576103456102ef565b5b80604052505050565b6000610359610231565b9050610365828261031e565b919050565b600067ffffffffffffffff821115610385576103846102ef565b5b602082029050602081019050919050565b600080fd5b60006103ae6103a98461036a565b61034f565b905080838252602082019050602084028301858111156103d1576103d0610396565b5b835b818110156103fa57806103e688826102c4565b8452602084019350506020810190506103d3565b5050509392505050565b600082601f830112610419576104186102d9565b5b813561042984826020860161039b565b91505092915050565b600080fd5b60008083601f84011261044d5761044c6102d9565b5b8235905067ffffffffffffffff81111561046a57610469610432565b5b60208301915083600182028301111561048657610485610396565b5b9250929050565b600080fd5b600067ffffffffffffffff8211156104ad576104ac6102ef565b5b6104b6826102de565b9050602081019050919050565b82818337600083830152505050565b60006104e56104e084610492565b61034f565b9050828152602081018484840111156105015761050061048d565b5b61050c8482856104c3565b509392505050565b600082601f830112610529576105286102d9565b5b81356105398482602086016104d2565b91505092915050565b60008060008060008060a0878903121561055f5761055e61023b565b5b600061056d89828a0161028e565b965050602061057e89828a016102c4565b955050604087013567ffffffffffffffff81111561059f5761059e610240565b5b6105ab89828a01610404565b945050606087013567ffffffffffffffff8111156105cc576105cb610240565b5b6105d889828a01610437565b9350935050608087013567ffffffffffffffff8111156105fb576105fa610240565b5b61060789828a01610514565b9150509295509295509295565b6000819050919050565b600061063961063461062f84610245565b610614565b610245565b9050919050565b600061064b8261061e565b9050919050565b600061065d82610640565b9050919050565b61066d81610652565b82525050565b60006020820190506106886000830184610664565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6106c681610265565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610701816102a3565b82525050565b600061071383836106f8565b60208301905092915050565b6000602082019050919050565b6000610737826106cc565b61074181856106d7565b935061074c836106e8565b8060005b8381101561077d5781516107648882610707565b975061076f8361071f565b925050600181019050610750565b5085935050505092915050565b600082825260208201905092915050565b50565b60006107ab60008361078a565b91506107b68261079b565b600082019050919050565b60006080820190506107d660008301866106bd565b81810360208301526107e8818561072c565b905081810360408301526107fc818461072c565b9050818103606083015261080f8161079e565b905094935050505056fea264697066735822122018f8fd3fbc5f113a04d92648271ef2de72ffc6374192aeaaa6dc130af23c26f264736f6c634300080a0033";

type BasicValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicValidator__factory extends ContractFactory {
  constructor(...args: BasicValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    id_: BigNumberish,
    _watcher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BasicValidator> {
    return super.deploy(
      id_,
      _watcher,
      overrides || {}
    ) as Promise<BasicValidator>;
  }
  override getDeployTransaction(
    id_: BigNumberish,
    _watcher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(id_, _watcher, overrides || {});
  }
  override attach(address: string): BasicValidator {
    return super.attach(address) as BasicValidator;
  }
  override connect(signer: Signer): BasicValidator__factory {
    return super.connect(signer) as BasicValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicValidatorInterface {
    return new utils.Interface(_abi) as BasicValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicValidator {
    return new Contract(address, _abi, signerOrProvider) as BasicValidator;
  }
}
