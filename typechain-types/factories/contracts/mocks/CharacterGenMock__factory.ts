/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CharacterGenMock,
  CharacterGenMockInterface,
} from "../../../contracts/mocks/CharacterGenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "pillboosts",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "traitsPlus",
        type: "string[]",
      },
    ],
    name: "createCharacter",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610af1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df7d765714610030575b600080fd5b61004a60048036038101906100459190610776565b610060565b6040516100579190610876565b60405180910390f35b606060016002600082825461007591906108d1565b925050819055508260009080519060200190610092929190610224565b5081600190805190602001906100a99291906102ae565b506100b56002546100bd565b905092915050565b60606000821415610105576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061021f565b600082905060005b6000821461013757808061012090610927565b915050600a82610130919061099f565b915061010d565b60008167ffffffffffffffff8111156101535761015261043f565b5b6040519080825280601f01601f1916602001820160405280156101855781602001600182028036833780820191505090505b50905060008290508593505b6000841461021757600a846101a691906109d0565b60306101b291906108d1565b60f81b82826101c090610a01565b925082815181106101d4576101d3610a2b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84610210919061099f565b9350610191565b819450505050505b919050565b82805482825590600052602060002090810192821561029d579160200282015b8281111561029c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610244565b5b5090506102aa919061030e565b5090565b8280548282559060005260206000209081019282156102fd579160200282015b828111156102fc5782518290805190602001906102ec92919061032b565b50916020019190600101906102ce565b5b50905061030a91906103b1565b5090565b5b8082111561032757600081600090555060010161030f565b5090565b82805461033790610a89565b90600052602060002090601f01602090048101928261035957600085556103a0565b82601f1061037257805160ff19168380011785556103a0565b828001600101855582156103a0579182015b8281111561039f578251825591602001919060010190610384565b5b5090506103ad919061030e565b5090565b5b808211156103d157600081816103c891906103d5565b506001016103b2565b5090565b5080546103e190610a89565b6000825580601f106103f35750610412565b601f016020900490600052602060002090810190610411919061030e565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104778261042e565b810181811067ffffffffffffffff821117156104965761049561043f565b5b80604052505050565b60006104a9610415565b90506104b5828261046e565b919050565b600067ffffffffffffffff8211156104d5576104d461043f565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610516826104eb565b9050919050565b6105268161050b565b811461053157600080fd5b50565b6000813590506105438161051d565b92915050565b600061055c610557846104ba565b61049f565b9050808382526020820190506020840283018581111561057f5761057e6104e6565b5b835b818110156105a857806105948882610534565b845260208401935050602081019050610581565b5050509392505050565b600082601f8301126105c7576105c6610429565b5b81356105d7848260208601610549565b91505092915050565b600067ffffffffffffffff8211156105fb576105fa61043f565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561062c5761062b61043f565b5b6106358261042e565b9050602081019050919050565b82818337600083830152505050565b600061066461065f84610611565b61049f565b9050828152602081018484840111156106805761067f61060c565b5b61068b848285610642565b509392505050565b600082601f8301126106a8576106a7610429565b5b81356106b8848260208601610651565b91505092915050565b60006106d46106cf846105e0565b61049f565b905080838252602082019050602084028301858111156106f7576106f66104e6565b5b835b8181101561073e57803567ffffffffffffffff81111561071c5761071b610429565b5b8086016107298982610693565b855260208501945050506020810190506106f9565b5050509392505050565b600082601f83011261075d5761075c610429565b5b813561076d8482602086016106c1565b91505092915050565b6000806040838503121561078d5761078c61041f565b5b600083013567ffffffffffffffff8111156107ab576107aa610424565b5b6107b7858286016105b2565b925050602083013567ffffffffffffffff8111156107d8576107d7610424565b5b6107e485828601610748565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561082857808201518184015260208101905061080d565b83811115610837576000848401525b50505050565b6000610848826107ee565b61085281856107f9565b935061086281856020860161080a565b61086b8161042e565b840191505092915050565b60006020820190508181036000830152610890818461083d565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108dc82610898565b91506108e783610898565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561091c5761091b6108a2565b5b828201905092915050565b600061093282610898565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610965576109646108a2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109aa82610898565b91506109b583610898565b9250826109c5576109c4610970565b5b828204905092915050565b60006109db82610898565b91506109e683610898565b9250826109f6576109f5610970565b5b828206905092915050565b6000610a0c82610898565b91506000821415610a2057610a1f6108a2565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610aa157607f821691505b60208210811415610ab557610ab4610a5a565b5b5091905056fea264697066735822122096f82db29a82f258b0cf96e36bdd3c7f66687a42104f8bca854e4fb6cab9b31c64736f6c634300080a0033";

type CharacterGenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CharacterGenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CharacterGenMock__factory extends ContractFactory {
  constructor(...args: CharacterGenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CharacterGenMock> {
    return super.deploy(overrides || {}) as Promise<CharacterGenMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CharacterGenMock {
    return super.attach(address) as CharacterGenMock;
  }
  override connect(signer: Signer): CharacterGenMock__factory {
    return super.connect(signer) as CharacterGenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CharacterGenMockInterface {
    return new utils.Interface(_abi) as CharacterGenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CharacterGenMock {
    return new Contract(address, _abi, signerOrProvider) as CharacterGenMock;
  }
}
