/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MetaDataStringMock,
  MetaDataStringMockInterface,
} from "../../../contracts/mocks/MetaDataStringMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getMetadataString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610208806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806303740be614610030575b600080fd5b61004a600480360381019061004591906100bd565b610060565b6040516100579190610183565b60405180910390f35b60606040518060600160405280602d81526020016101a6602d91399050919050565b600080fd5b6000819050919050565b61009a81610087565b81146100a557600080fd5b50565b6000813590506100b781610091565b92915050565b6000602082840312156100d3576100d2610082565b5b60006100e1848285016100a8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610124578082015181840152602081019050610109565b83811115610133576000848401525b50505050565b6000601f19601f8301169050919050565b6000610155826100ea565b61015f81856100f5565b935061016f818560208601610106565b61017881610139565b840191505092915050565b6000602082019050818103600083015261019d818461014a565b90509291505056fe7b2774726169745f74797065273a2027506572736f6e616c697479272c202776616c7565273a2027536164277da2646970667358221220c1fd6cc8123227e4051ba0f2b0bcc35659ccc78795d705706f050accbb51deec64736f6c634300080a0033";

type MetaDataStringMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaDataStringMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaDataStringMock__factory extends ContractFactory {
  constructor(...args: MetaDataStringMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MetaDataStringMock> {
    return super.deploy(overrides || {}) as Promise<MetaDataStringMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaDataStringMock {
    return super.attach(address) as MetaDataStringMock;
  }
  override connect(signer: Signer): MetaDataStringMock__factory {
    return super.connect(signer) as MetaDataStringMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaDataStringMockInterface {
    return new utils.Interface(_abi) as MetaDataStringMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaDataStringMock {
    return new Contract(address, _abi, signerOrProvider) as MetaDataStringMock;
  }
}
